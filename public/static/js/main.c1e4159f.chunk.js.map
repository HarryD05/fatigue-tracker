{"version":3,"sources":["helpers/date.js","components/navigation/Navbar.js","pages/home.js","queries/today.js","queries/initDay.js","components/initDayForm/initDayForm.js","queries/initLog.js","queries/updateLog.js","queries/completeLogs.js","queries/setBedTime.js","queries/calculateAverages.js","components/newLogForms/newLogForms.js","pages/today.js","queries/getDays.js","components/dayTile/catTimings.js","components/dayTile/dayTile.js","pages/logs.js","queries/getDay.js","components/logRow/LogRow.js","pages/logDetails.js","App.js","index.js"],"names":["ensureTwoDigits","num","toString","length","exports","formatDate","date","getDate","index","getMonth","0","1","2","3","4","5","6","7","8","9","10","11","getFullYear","formatTime","getHours","getMinutes","Navbar","props","className","to","Home","today","gql","initDay","graphql","useState","startTime","initPhysTiredness","initMentTiredness","initInput","setInitInput","changeHandler","e","target","name","value","submitForm","a","preventDefault","mutate","variables","initDayInput","Date","toDateString","Number","then","onComplete","id","onSubmit","htmlFor","type","onChange","min","max","step","initLog","updateLog","completeLogs","setBedTime","calculateAverages","compose","category","physTiredness","mentTiredness","setInitLog","endTime","finalLog","setFinalLog","isFinal","updateLogFunc","updateInput","document","getElementById","reset","submitHandler","time","isFirstLog","defaultValue","data","loading","needToInit","firstLog","completed","logs","message","refetch","alert","getDays","categories","CatTimings","categoryHTML","count","timeSpent","forEach","toFixed","dangerouslySetInnerHTML","__html","DayTile","day","isExpanded","setIsExpanded","dayString","awakeTime","bedTime","avgMentTiredness","avgPhysTiredness","log","diff","Math","abs","mins","onClick","history","push","_id","days","map","key","getDay","LogRow","calcDiff","mentDiff","endMentTiredness","physDiff","endPhysTiredness","LogDetails","useParams","useQuery","dayId","error","App","exact","path","component","Today","Logs","client","ApolloClient","uri","ReactDOM","render"],"mappings":"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","file":"static/js/main.c1e4159f.chunk.js","sourcesContent":["const indexToMonth = index => {\r\n  return {\r\n    0: 'January',\r\n    1: 'February',\r\n    2: 'March',\r\n    3: 'April',\r\n    4: 'May',\r\n    5: 'June',\r\n    6: 'July',\r\n    7: 'August',\r\n    8: 'September',\r\n    9: 'October',\r\n    10: 'November',\r\n    11: 'December',\r\n  }[index]\r\n}\r\n\r\nconst formatDate = date => {\r\n  return `${date.getDate()} ${indexToMonth(date.getMonth())} ${date.getFullYear()}`;\r\n}\r\n\r\nconst formatTime = date => {\r\n  return `${ensureTwoDigits(date.getHours())}:${ensureTwoDigits(date.getMinutes())}`;\r\n}\r\n\r\nconst ensureTwoDigits = num => {\r\n  return num.toString().length === 2 ? num : '0' + num;\r\n}\r\n\r\nexports.formatDate = formatDate;\r\nexports.formatTime = formatTime","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n//Styling\r\nimport './navbar.scss';\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"title\">\r\n        <NavLink to=\"/\"><h1>Fatigue Tracker</h1></NavLink>\r\n      </div>\r\n\r\n      <div className=\"links\">\r\n        <ul>\r\n          <li><NavLink to=\"/logs\">Logs</NavLink></li>\r\n          <li><NavLink to=\"/today\">Today</NavLink></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\n//Styling\r\nimport './pages.scss';\r\n\r\nconst Home = props => {\r\n  return (\r\n    <main className=\"home\">\r\n      <h1>Home</h1>\r\n\r\n      <div className=\"aim\">\r\n        <h2>Aim</h2>\r\n        <p>Track activity & tiredness througout the day - to see what activities have the greatest toll on fatigue.</p>\r\n      </div>\r\n\r\n      <h2>Types of activity: </h2>\r\n      <ul>\r\n        <li><b>Required</b> e.g. eating, showering & time with helpers</li>\r\n        <li><b>Resting</b> e.g. napping in bed or sitting with no stimulation</li>\r\n        <li><b>Rehabilitation</b> e.g. physio & exercise</li>\r\n        <li><b>Socialising</b> e.g. phone call, facebook portal, facetime & posting on facebook</li>\r\n        <li><b>Non-productive</b> e.g. reading, watching TV, listening to radio & browsing facebook</li>\r\n      </ul>\r\n\r\n      <h2>Logs</h2>\r\n      <p>Each time you start an activity a new activity, you add a new log - you will need to ...</p>\r\n      <ul>\r\n        <li>Select what type of activity it is</li>\r\n        <li>Log your current tiredness (physical & mental)</li>\r\n      </ul>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Home;","import { gql } from 'apollo-boost';\r\n\r\nconst today = gql`\r\n  query {\r\n    today {\r\n      _id\r\n      date\r\n      startTime\r\n      endTime\r\n      initMentTiredness\r\n      initPhysTiredness\r\n      endMentTiredness\r\n      endPhysTiredness\r\n      avgMentTiredness\r\n      avgPhysTiredness\r\n      logs {\r\n        _id \r\n        startTime\r\n        endTime\r\n        category\r\n        initPhysTiredness\r\n        initMentTiredness\r\n        endPhysTiredness\r\n        endMentTiredness\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default today;","import { gql } from 'apollo-boost';\r\n\r\nconst initDay = gql`\r\n  mutation initDay($initDayInput: InitDayInput!){\r\n    initDay(initDayInput: $initDayInput) {\r\n      _id\r\n      date\r\n      startTime\r\n      endTime\r\n      initMentTiredness\r\n      initPhysTiredness\r\n      endMentTiredness\r\n      endPhysTiredness\r\n      avgMentTiredness\r\n      avgPhysTiredness\r\n      logs {\r\n        _id \r\n        startTime\r\n        endTime\r\n        category\r\n        initPhysTiredness\r\n        initMentTiredness\r\n        endPhysTiredness\r\n       endMentTiredness\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default initDay;","//React dependencies\r\nimport React, { useState } from 'react';\r\n\r\n//Apollo dependencies\r\nimport { graphql } from 'react-apollo';\r\nimport initDay from './../../queries/initDay';\r\n\r\n//Styling\r\nimport './initDayForm.scss';\r\n\r\nconst InitDayForm = props => {\r\n  const [initInput, setInitInput] = useState({\r\n    startTime: null,\r\n    initPhysTiredness: 9,\r\n    initMentTiredness: 9\r\n  })\r\n\r\n  const changeHandler = e => {\r\n    setInitInput({\r\n      ...initInput,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const submitForm = async e => {\r\n    e.preventDefault();\r\n\r\n    props.mutate({\r\n      variables: {\r\n        initDayInput: {\r\n          startTime: new Date(new Date().toDateString() + \" \" + initInput.startTime),\r\n          initPhysTiredness: Number(initInput.initPhysTiredness),\r\n          initMentTiredness: Number(initInput.initMentTiredness)\r\n        }\r\n      }\r\n    }).then(() => {\r\n      props.onComplete();\r\n    })\r\n  }\r\n\r\n  return (\r\n    <form id=\"init-day\" onSubmit={submitForm}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"startTime\">Woke up: </label>\r\n        <input type=\"time\" name=\"startTime\" onChange={changeHandler}></input>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"initPhysTiredness\">Initial physical tiredness: </label>\r\n        <input type=\"range\" min=\"0\" max=\"9\" step=\"1\" name=\"initPhysTiredness\" onChange={changeHandler}></input>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"initMentTiredness\">Initial mental tiredness: </label>\r\n        <input type=\"range\" min=\"0\" max=\"9\" step=\"1\" name=\"initMentTiredness\" onChange={changeHandler}></input>\r\n      </div>\r\n\r\n      <div className=\"init-container\">\r\n        <button type=\"submit\">Initialise new day</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default graphql(initDay)(InitDayForm);","import { gql } from 'apollo-boost';\r\n\r\nconst initLog = gql`\r\n  mutation initLog($initInput: InitInput!){\r\n    initLog(initInput: $initInput) {\r\n      _id \r\n      startTime\r\n      endTime\r\n      category\r\n      initPhysTiredness\r\n      initMentTiredness\r\n      endPhysTiredness\r\n      endMentTiredness\r\n    }\r\n  }\r\n`;\r\n\r\nexport default initLog;","import { gql } from 'apollo-boost';\r\n\r\nconst updateLog = gql`\r\n  mutation updateLog($updateInput: UpdateInput!){\r\n    updateLog(updateInput: $updateInput) {\r\n      _id \r\n      startTime\r\n      endTime\r\n      category\r\n      initPhysTiredness\r\n      initMentTiredness\r\n      endPhysTiredness\r\n      endMentTiredness\r\n    }\r\n  }\r\n`;\r\n\r\nexport default updateLog;","import { gql } from 'apollo-boost';\r\n\r\nconst completeLogs = gql`\r\n  mutation completeLogs($updateInput: UpdateInput!){\r\n    completeLogs(updateInput: $updateInput) {\r\n      _id \r\n      startTime\r\n      endTime\r\n      category\r\n      initPhysTiredness\r\n      initMentTiredness\r\n      endPhysTiredness\r\n      endMentTiredness\r\n    }\r\n  }\r\n`;\r\n\r\nexport default completeLogs;","import { gql } from 'apollo-boost';\r\n\r\nconst setBedTime = gql`\r\n  mutation setBedTime($time: String!){\r\n    setBedTime(time: $time) {\r\n      _id\r\n      date\r\n      startTime\r\n      endTime\r\n      initMentTiredness\r\n      initPhysTiredness\r\n      endMentTiredness\r\n      endPhysTiredness\r\n      avgMentTiredness\r\n      avgPhysTiredness\r\n      logs {\r\n        _id \r\n        startTime\r\n        endTime\r\n        category\r\n        initPhysTiredness\r\n        initMentTiredness\r\n        endPhysTiredness\r\n        endMentTiredness\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default setBedTime;","import { gql } from 'apollo-boost';\r\n\r\nconst calculateAverages = gql`\r\n  mutation calculateAverages($date: String!){\r\n    calculateAverages(date: $date) {\r\n      _id\r\n      date\r\n      startTime\r\n      endTime\r\n      initPhysTiredness\r\n      initMentTiredness\r\n      endMentTiredness\r\n      endPhysTiredness\r\n      avgPhysTiredness\r\n      avgMentTiredness\r\n      logs {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default calculateAverages;","//React dependencies\r\nimport React, { useState } from 'react';\r\n\r\n//Apollo dependencies\r\nimport { graphql } from 'react-apollo';\r\nimport { flowRight as compose } from 'lodash';\r\n\r\n//Queries\r\nimport initLog from './../../queries/initLog';\r\nimport updateLog from './../../queries/updateLog';\r\nimport completeLogs from './../../queries/completeLogs';\r\nimport setBedTime from './../../queries/setBedTime';\r\nimport calculateAverages from './../../queries/calculateAverages';\r\n\r\n//Styling\r\nimport './newLogForms.scss';\r\n\r\nconst NewLogForms = props => {\r\n  const [initLog, setInitLog] = useState({\r\n    category: null,\r\n    physTiredness: 9,\r\n    mentTiredness: 9\r\n  });\r\n\r\n  const [finalLog, setFinalLog] = useState({\r\n    endTime: null,\r\n    physTiredness: 9,\r\n    mentTiredness: 9\r\n  });\r\n\r\n  const changeHandler = (e, isFinal) => {\r\n    if (isFinal) {\r\n      setFinalLog({\r\n        ...finalLog,\r\n        [e.target.name]: e.target.value\r\n      })\r\n    } else {\r\n      setInitLog({\r\n        ...initLog,\r\n        [e.target.name]: e.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  const updateLogFunc = isFinal => {\r\n    if (!isFinal) {\r\n      document.getElementById('init-log').reset();\r\n      props.updateLog({\r\n        variables: {\r\n          updateInput: {\r\n            physTiredness: Number(initLog.physTiredness),\r\n            mentTiredness: Number(initLog.mentTiredness),\r\n            endTime: new Date()\r\n          }\r\n        }\r\n      }).then(() => {\r\n        props.onComplete('Log submitted!');\r\n      })\r\n    } else {\r\n      props.completeLogs({\r\n        variables: {\r\n          updateInput: {\r\n            physTiredness: Number(finalLog.physTiredness),\r\n            mentTiredness: Number(finalLog.mentTiredness),\r\n            endTime: new Date(finalLog.endTime)\r\n          }\r\n        }\r\n      }).then(() => {\r\n        props.calculateAverages({\r\n          variables: {\r\n            date: new Date()\r\n          }\r\n        }).then(() => {\r\n          props.onComplete('Final log set, you\\'re done for the day!');\r\n        })\r\n      });\r\n    }\r\n  }\r\n\r\n  const submitHandler = (e, isFinal) => {\r\n    e.preventDefault();\r\n\r\n    if (isFinal) {\r\n      props.setBedTime({\r\n        variables: {\r\n          time: new Date(new Date().toDateString() + \" \" + finalLog.endTime)\r\n        }\r\n      }).then(() => {\r\n        updateLogFunc(true);\r\n      })\r\n    } else {\r\n      if (props.isFirstLog) {\r\n        props.initLog({\r\n          variables: {\r\n            initInput: {\r\n              category: 0,\r\n              startTime: new Date(props.startTime)\r\n            }\r\n          }\r\n        })\r\n      }\r\n\r\n      props.initLog({\r\n        variables: {\r\n          initInput: {\r\n            category: Number(initLog.category),\r\n            startTime: new Date()\r\n          }\r\n        }\r\n      }).then(() => {\r\n        updateLogFunc(false);\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"log-forms\">\r\n      <form id=\"init-log\" onSubmit={e => submitHandler(e, false)}>\r\n        <h1>New Log</h1>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"category\">Category</label>\r\n          <select name=\"category\" onChange={e => changeHandler(e, false)}>\r\n            <option value={0}>Required</option>\r\n            <option value={1}>Rest</option>\r\n            <option value={2}>Rehabilitation</option>\r\n            <option value={3}>Socialising</option>\r\n            <option value={4}>Non-productive</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"physTiredness\">physical tiredness: </label>\r\n          <input type=\"range\" min=\"0\" max=\"9\" step=\"1\" defaultValue=\"9\" name=\"physTiredness\" onChange={e => changeHandler(e, false)} />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"mentTiredness\">mental tiredness: </label>\r\n          <input type=\"range\" min=\"0\" max=\"9\" step=\"1\" defaultValue=\"9\" name=\"mentTiredness\" onChange={e => changeHandler(e, false)} />\r\n        </div>\r\n\r\n        <div className=\"init-container\">\r\n          <button type=\"submit\">Submit log</button>\r\n        </div>\r\n      </form>\r\n\r\n      <form id=\"bedtime-form\" onSubmit={e => submitHandler(e, true)}>\r\n        <h1>Final log</h1>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"endTime\">Bed time: </label>\r\n          <input type=\"time\" name=\"endTime\" onChange={e => changeHandler(e, true)} />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"physTiredness\">physical tiredness: </label>\r\n          <input type=\"range\" min=\"0\" max=\"9\" step=\"1\" defaultValue=\"9\" name=\"physTiredness\" onChange={e => changeHandler(e, true)} />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"mentTiredness\">mental tiredness: </label>\r\n          <input type=\"range\" min=\"0\" max=\"9\" step=\"1\" defaultValue=\"9\" name=\"mentTiredness\" onChange={e => changeHandler(e, true)} />\r\n        </div>\r\n\r\n        <div className=\"init-container\">\r\n          <button type=\"submit\">Submit log</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default compose(\r\n  graphql(initLog, { name: 'initLog' }),\r\n  graphql(updateLog, { name: 'updateLog' }),\r\n  graphql(completeLogs, { name: 'completeLogs' }),\r\n  graphql(setBedTime, { name: 'setBedTime' }),\r\n  graphql(calculateAverages, { name: 'calculateAverages' })\r\n)(NewLogForms);","//React dependencies\r\nimport React from 'react';\r\n\r\n//Apollo dependencies\r\nimport { graphql } from 'react-apollo';\r\nimport today from './../queries/today';\r\n\r\n//Styling\r\nimport './pages.scss';\r\n\r\n//Helpers\r\nimport { formatDate } from './../helpers/date';\r\n\r\n//Components\r\nimport InitDayForm from './../components/initDayForm/initDayForm';\r\nimport NewLogForms from './../components/newLogForms/newLogForms';\r\n\r\nconst Today = props => {\r\n  const { today, loading } = props.data;\r\n\r\n  let needToInit = true;\r\n  let firstLog = false;\r\n  let completed = false;\r\n  if (today) {\r\n    needToInit = (new Date(today.date).getDate() !== new Date().getDate());\r\n    firstLog = today.logs.length === 0;\r\n    completed = (today.endTime ? true : false);\r\n  }\r\n\r\n  const onSubmit = message => {\r\n    props.data.refetch();\r\n\r\n    alert((message) ? message : 'Successful');\r\n  }\r\n\r\n  return (\r\n    <main className=\"today\">\r\n      <h1>Today</h1>\r\n      <h2>{formatDate(new Date())}</h2>\r\n      <br />\r\n\r\n      {loading ? <h2 className=\"loading\">Loading...</h2> : null}\r\n      {!loading && needToInit ? <InitDayForm onComplete={onSubmit} {...props} /> : null}\r\n      {!loading && !needToInit && today && !completed ? <NewLogForms onComplete={onSubmit} isFirstLog={firstLog} startTime={today.startTime} {...props} /> : null}\r\n      {!loading && !needToInit && completed ? <h2>Completed</h2> : null}\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default graphql(today)(Today);","import { gql } from 'apollo-boost';\r\n\r\nconst getDays = gql`\r\n  query {\r\n    days {\r\n      _id\r\n      date\r\n      startTime\r\n      endTime\r\n      initMentTiredness\r\n      initPhysTiredness\r\n      endMentTiredness\r\n      endPhysTiredness\r\n      avgMentTiredness\r\n      avgPhysTiredness\r\n      logs {\r\n        _id \r\n        startTime\r\n        endTime\r\n        category\r\n        initPhysTiredness\r\n        initMentTiredness\r\n        endPhysTiredness\r\n        endMentTiredness\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default getDays;","//React dependencies\r\nimport React from 'react';\r\n\r\nconst categories = {\r\n  0: 'Required',\r\n  1: 'Rest',\r\n  2: 'Rehabilitation',\r\n  3: 'Socialising',\r\n  4: 'Non-productive'\r\n}\r\n\r\nconst CatTimings = props => {\r\n  let categoryHTML = '';\r\n\r\n  let count = -1;\r\n  props.timeSpent.forEach(time => {\r\n    count++;\r\n    categoryHTML += `\r\n      <div className=\"category\">\r\n        <b>${categories[count]}</b>: <p>${time.toFixed(2)} mins</p>\r\n      </div>\r\n    `\r\n  })\r\n\r\n  return (\r\n    <div className=\"categories\" dangerouslySetInnerHTML={{ __html: categoryHTML }} ></ div>\r\n  )\r\n}\r\n\r\nexport default CatTimings;","//React dependencies\r\nimport React, { useState } from 'react';\r\n\r\n//Styling\r\nimport './dayTile.scss';\r\n\r\n//Components\r\nimport CatTimings from './catTimings';\r\n\r\n//Helpers \r\nimport { formatDate, formatTime } from './../../helpers/date';\r\n\r\nconst DayTile = props => {\r\n  const { day } = props;\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  const dayString = formatDate(new Date(day.startTime));\r\n  const awakeTime = formatTime(new Date(day.startTime));\r\n  const bedTime = day.endTime ? formatTime(new Date(day.endTime)) : 'Not yet submitted';\r\n  const mentTiredness = day.avgMentTiredness ? day.avgMentTiredness : 'Not yet calculated - day not complete';\r\n  const physTiredness = day.avgPhysTiredness ? day.avgPhysTiredness : 'Not yet calculated - day not complete';\r\n\r\n  let timeSpent = [0, 0, 0, 0, 0];\r\n\r\n  day.logs.forEach(log => {\r\n    if (log.endTime) {\r\n      const diff = Math.abs(new Date(log.endTime) - new Date(log.startTime)) / 1000;\r\n      const mins = Number((diff / 60).toFixed(1));\r\n\r\n      timeSpent[log.category] += mins;\r\n    }\r\n  })\r\n\r\n  const renderDetails = () => {\r\n    return (\r\n      <div className=\"details\">\r\n        <div className=\"times\">\r\n          <h3>Woke up: </h3><p>{awakeTime}</p>\r\n          <br />\r\n          <h3>Bed time: </h3><p>{bedTime}</p>\r\n        </div>\r\n\r\n        <div className=\"averages\">\r\n          <h3>Averages</h3><br />\r\n          <h4>Physical tiredness: </h4><p>{physTiredness}</p>\r\n          <br />\r\n          <h4>Mental tiredness: </h4><p>{mentTiredness}</p>\r\n        </div>\r\n\r\n        <div className=\"categories-container\">\r\n          <h3>Time spent on each category</h3><br />\r\n          <CatTimings timeSpent={timeSpent} {...props} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const showDayLogs = () => {\r\n    props.history.push(`/logs/${day._id}`);\r\n  }\r\n\r\n  return (\r\n    <div className=\"day-tile\">\r\n      <h2>{dayString}</h2>\r\n      <button\r\n        onClick={() => setIsExpanded(!isExpanded)}\r\n      >Summary</button>\r\n      <button\r\n        onClick={showDayLogs}\r\n      >See all logs...</button>\r\n\r\n      {isExpanded ? renderDetails() : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DayTile;","//React dependencies\r\nimport React from 'react';\r\n\r\n//Apollo dependencies\r\nimport { graphql } from 'react-apollo';\r\nimport getDays from './../queries/getDays';\r\n\r\n//Components\r\nimport DayTile from '../components/dayTile/dayTile';\r\n\r\n//Styling\r\nimport './pages.scss';\r\n\r\nconst Logs = props => {\r\n  const { loading, days } = props.data;\r\n\r\n  return (\r\n    <main className='logs'>\r\n      <h1>Logs</h1>\r\n\r\n      {loading && <h2 className=\"loading\">Loading...</h2>}\r\n      {days && days.map(day => <DayTile key={day._id} day={day} {...props} />)}\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default graphql(getDays)(Logs);","import { gql } from 'apollo-boost';\r\n\r\nconst getDay = gql`\r\n  query getDay($dayId: ID!){\r\n    day (dayId: $dayId) {\r\n      _id\r\n      date\r\n      startTime\r\n      endTime\r\n      initMentTiredness\r\n      initPhysTiredness\r\n      endMentTiredness\r\n      endPhysTiredness\r\n      avgMentTiredness\r\n      avgPhysTiredness\r\n      logs {\r\n        _id \r\n        startTime\r\n        endTime\r\n        category\r\n        initPhysTiredness\r\n        initMentTiredness\r\n        endPhysTiredness\r\n        endMentTiredness\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default getDay;","//React dependencies\r\nimport React from 'react';\r\n\r\n//Helper\r\nimport { formatTime } from './../../helpers/date';\r\n\r\n//Styling\r\nimport './logRow.scss';\r\n\r\nconst categories = {\r\n  0: 'Required',\r\n  1: 'Rest',\r\n  2: 'Rehab',\r\n  3: 'Social',\r\n  4: 'Non-prod.'\r\n}\r\n\r\nconst LogRow = props => {\r\n  const { log } = props;\r\n\r\n  //start time - end time - length - category - initMent - endMent - changeMent - rateOfChangeMent - initPhys - endPhys - changePhys - rateOfChangePhys\r\n\r\n  const calcDiff = (endTime, startTime) => {\r\n    const diff = Math.abs(new Date(endTime) - new Date(startTime)) / 1000;\r\n    const mins = Number((diff / 60).toFixed(1));\r\n\r\n    return mins;\r\n  }\r\n\r\n  const length = calcDiff(log.endTime, log.startTime);\r\n  const mentDiff = log.endMentTiredness - log.initMentTiredness;\r\n  const physDiff = log.endPhysTiredness - log.initPhysTiredness;\r\n\r\n  return (\r\n    <tr>\r\n      <td>{formatTime(new Date(log.startTime))}</td>\r\n      <td>{formatTime(new Date(log.endTime))}</td>\r\n      <td>{length}</td>\r\n      <td>{categories[log.category]}</td>\r\n      <td>{log.initMentTiredness}</td>\r\n      <td>{log.endMentTiredness}</td>\r\n      <td>{mentDiff}</td>\r\n      <td>{(mentDiff / length).toFixed(2)}</td>\r\n      <td>{log.initPhysTiredness}</td>\r\n      <td>{log.endPhysTiredness}</td>\r\n      <td>{physDiff}</td>\r\n      <td>{(physDiff / length).toFixed(2)}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default LogRow;","//React dependencies\r\nimport React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n//Apollo dependencies\r\nimport { useQuery } from 'react-apollo';\r\nimport getDay from './../queries/getDay';\r\n\r\n//Components\r\nimport LogRow from './../components/logRow/LogRow';\r\n\r\n//Styling\r\nimport './pages.scss';\r\n\r\n//Helpers\r\nimport { formatDate } from './../helpers/date';\r\n\r\nconst LogDetails = props => {\r\n  const { id } = useParams();\r\n  const { loading, error, data } = useQuery(getDay, {\r\n    variables: {\r\n      dayId: id\r\n    }\r\n  });\r\n\r\n  const renderDay = day => {\r\n    return (\r\n      <div className=\"day\">\r\n        <h1>{formatDate(new Date(day.date))}</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Start time</th>\r\n              <th>End time</th>\r\n              <th>Length (minutes)</th>\r\n              <th>Category</th>\r\n              <th>Start mental tiredness</th>\r\n              <th>End mental tiredness</th>\r\n              <th>Change in mental tiredness</th>\r\n              <th>Rate of change in mental tiredness (units per min)</th>\r\n              <th>Start physical tiredness</th>\r\n              <th>End physical tiredness</th>\r\n              <th>Change in physical tiredness</th>\r\n              <th>Rate of change in physical tiredness (units per min)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {day.logs.map(log => <LogRow key={log._id} log={log} />)}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='day-details'>\r\n      {loading && <h2 className=\"loading\">Loading...</h2>}\r\n      {error && <h2 className=\"error\">ERROR</h2>}\r\n      {!loading && !error && data.day && renderDay(data.day)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LogDetails;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\n//components\nimport Navbar from './components/navigation/Navbar';\n\n//pages\nimport Home from './pages/home';\nimport Today from './pages/today';\nimport Logs from './pages/logs';\nimport LogDetails from './pages/logDetails';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/today\" component={Today} />\n        <Route exact path=\"/logs\" component={Logs} />\n        <Route path=\"/logs/:id\" component={LogDetails} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","//React dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\n//Apollo client\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n//components\nimport App from './App';\n\n//Styling\nimport './index.scss';\n\n//Using ApolloClient to connect with server\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router><App /></Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}